{"Immutable":{"doc":{"synopsis":"Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.","description":"While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.\n\nNote: all examples are presented in [ES6][]. To run in all browsers, they\nneed to be translated to ES3. For example:\n\n    // ES6\n    foo.map(x => x * x);\n    // ES3\n    foo.map(function (x) { return x * x; });\n\n[ES6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla"},"module":{"fromJS":{"call":{"doc":{"synopsis":"Deeply converts plain JS objects and arrays to Immutable Maps and Lists.","description":"If a `reviver` is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nrefering to each collection and the parent JS object provided as `this`.\nFor the top level, object, the key will be `\"\"`. This `reviver` is expected\nto return a new Immutable Iterable, allowing for custom conversions from\ndeep JS objects.\n\nThis example converts JSON to List and OrderedMap:\n\n    Immutable.fromJS({a: {b: [10, 20, 30]}, c: 40}, function (key, value) {\n      var isIndexed = Immutable.Iterable.isIndexed(value);\n      return isIndexed ? value.toList() : value.toOrderedMap();\n    });\n\n    // true, \"b\", {b: [10, 20, 30]}\n    // false, \"a\", {a: {b: [10, 20, 30]}, c: 40}\n    // false, \"\", {\"\": {a: {b: [10, 20, 30]}, c: 40}}\n\nIf `reviver` is not provided, the default behavior will convert Arrays into\nLists and Objects into Maps.\n\n`reviver` acts similarly to the [same parameter in `JSON.parse`][1].\n\n`Immutable.fromJS` is conservative in its conversion. It will only convert\narrays which pass `Array.isArray` to Lists, and only raw objects (no custom\nprototype) to Map.\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a\nquote-less shorthand, while Immutable Maps accept keys of any type.\n\n```js\nvar obj = { 1: \"one\" };\nObject.keys(obj); // [ \"1\" ]\nobj[\"1\"]; // \"one\"\nobj[1];   // \"one\"\n\nvar map = Map(obj);\nmap.get(\"1\"); // \"one\"\nmap.get(1);   // undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string,\nbut since Immutable Map keys can be of any type the argument to `get()` is\nnot altered.\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\n     \"Using the reviver parameter\""},"signatures":[{"params":[{"name":"json","type":{"k":0}},{"name":"reviver","optional":true,"type":{"k":6,"params":[{"name":"k","type":{"k":0}},{"name":"v","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":0}}}],"type":{"k":0},"line":31}]}},"is":{"call":{"doc":{"synopsis":"Value equality check with semantics similar to `Object.is`, but treats\nImmutable `Iterable`s as values, equal if the second `Iterable` includes\nequivalent values.","description":"It's used throughout Immutable when checking for equality, including `Map`\nkey equality and `Set` membership.\n\n    var map1 = Immutable.Map({a:1, b:1, c:1});\n    var map2 = Immutable.Map({a:1, b:1, c:1});\n    assert(map1 !== map2);\n    assert(Object.is(map1, map2) === false);\n    assert(Immutable.is(map1, map2) === true);\n\nNote: Unlike `Object.is`, `Immutable.is` assumes `0` and `-0` are the same\nvalue, matching the behavior of ES6 Map key equality."},"signatures":[{"params":[{"name":"first","type":{"k":0}},{"name":"second","type":{"k":0}}],"type":{"k":1},"line":89}]}},"List":{"doc":{"synopsis":"Lists are ordered indexed dense collections, much like a JavaScript\nArray.","description":"Lists are immutable and fully persistent with O(log32 N) gets and sets,\nand O(1) push and pop.\n\nLists implement Deque, with efficient addition and removal from both the\nend (`push`, `pop`) and beginning (`unshift`, `shift`).\n\nUnlike a JavaScript Array, there is no distinction between an\n\"unset\" index and an index set to `undefined`. `List#forEach` visits all\nindices from 0 to size, regardless of whether they were explicitly defined."},"module":{"isList":{"call":{"doc":{"synopsis":"True if the provided value is a List"},"signatures":[{"params":[{"name":"maybeList","type":{"k":0}}],"type":{"k":1},"line":126}]}},"of":{"call":{"doc":{"synopsis":"Creates a new List containing `values`."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":131}]}}},"call":{"doc":{"synopsis":"Create a new immutable List containing the values of the provided\niterable-like."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":137},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":143},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":144},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"List","args":[{"k":0}]},"line":145},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":146},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":147},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":148}]},"interface":{"line":149,"typeParams":["T"],"extends":[{"k":8,"name":"Collection.Indexed","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","members":{"#set":{"doc":{"synopsis":"Returns a new List which includes `value` at `index`. If `index` already\nexists in this List, it will be replaced.","description":"`index` may be a negative number, which indexes back from the end of the\nList. `v.set(-1, \"value\")` sets the last item in the List.\n\nIf `index` larger than `size`, the returned List's `size` will be large\nenough to include the `index`."},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":152}]},"#delete":{"doc":{"synopsis":"Returns a new List which excludes this `index` and with a size 1 less\nthan this List. Values at indices above `index` are shifted down by 1 to\nfill the position.","notes":[{"name":"alias","body":"remove"}],"description":"This is synonymous with `list.splice(index, 1)`.\n\n`index` may be a negative number, which indexes back from the end of the\nList. `v.delete(-1)` deletes the last item in the List.\n\nNote: `delete` cannot be safely used in IE8"},"signatures":[{"params":[{"name":"index","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":166}]},"#insert":{"doc":{"synopsis":"Returns a new List with `value` at `index` with a size 1 more than this\nList. Values at indices above `index` are shifted over by 1.","description":"This is synonymous with `list.splice(index, 0, value)"},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":182}]},"#clear":{"doc":{"synopsis":"Returns a new List with 0 size and no values."},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":190}]},"#push":{"doc":{"synopsis":"Returns a new List with the provided `values` appended, starting at this\nList's `size`."},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":195}]},"#pop":{"doc":{"synopsis":"Returns a new List with a size ones less than this List, excluding\nthe last index in this List.","description":"Note: this differs from `Array#pop` because it returns a new\nList rather than the removed value. Use `last()` to get the last value\nin this List."},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":201}]},"#unshift":{"doc":{"synopsis":"Returns a new List with the provided `values` prepended, shifting other\nvalues ahead to higher indices."},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":211}]},"#shift":{"doc":{"synopsis":"Returns a new List with a size ones less than this List, excluding\nthe first index in this List, shifting all other values to a lower index.","description":"Note: this differs from `Array#shift` because it returns a new\nList rather than the removed value. Use `first()` to get the first\nvalue in this List."},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":217}]},"#update":{"doc":{"synopsis":"Returns a new List with an updated value at `index` with the return\nvalue of calling `updater` with the existing value, or `notSetValue` if\n`index` was not set. If called with a single argument, `updater` is\ncalled with the List itself.","notes":[{"name":"see","body":"`Map#update`"}],"description":"`index` may be a negative number, which indexes back from the end of the\nList. `v.update(-1)` updates the last item in the List.\n"},"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":227},{"params":[{"name":"index","type":{"k":2}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":240},{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","type":{"k":7,"param":"T"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":241}]},"#merge":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#merge`"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":242},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":247}]},"#mergeWith":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#mergeWith`"}]},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}},{"name":"key","optional":true,"type":{"k":2}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":248},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}},{"name":"key","optional":true,"type":{"k":2}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":256}]},"#mergeDeep":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#mergeDeep`"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":260},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":265}]},"#mergeDeepWith":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#mergeDeepWith`"}]},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}},{"name":"key","optional":true,"type":{"k":2}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":266},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"T"}},{"name":"next","optional":true,"type":{"k":7,"param":"T"}},{"name":"key","optional":true,"type":{"k":2}}],"type":{"k":7,"param":"T"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":274}]},"#setSize":{"doc":{"synopsis":"Returns a new List with size `size`. If `size` is less than this\nList's size, the new List will exclude values at the higher indices.\nIf `size` is greater than this List's size, the new List will have\nundefined values for the newly available indices.","description":"When building a new List and the final size is known up front, `setSize`\nused in conjunction with `withMutations` may result in the more\nperformant construction."},"signatures":[{"params":[{"name":"size","type":{"k":2}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":278}]}}},{"title":"Deep persistent changes","members":{"#setIn":{"doc":{"synopsis":"Returns a new List having set `value` at this `keyPath`. If any keys in\n`keyPath` do not exist, a new immutable Map will be created at that key.","description":"Index numbers are used as keys to determine the path to follow in\nthe List."},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":0}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":290},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":0}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":302}]},"#deleteIn":{"doc":{"synopsis":"Returns a new List having removed the value at this `keyPath`. If any\nkeys in `keyPath` do not exist, no change will occur.\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":303},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":311}]},"#updateIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#updateIn`"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":314},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":322},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":327},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":331}]},"#mergeIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#mergeIn`"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":336},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":344},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":348}]},"#mergeDeepIn":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#mergeDeepIn`"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":352},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":360},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":364}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"Note: Not all methods can be used on a mutable collection or within\n`withMutations`! Only `set`, `push`, `pop`, `shift`, `unshift` and\n`merge` may be used mutatively.\n","notes":[{"name":"see","body":"`Map#withMutations`"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":368}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asMutable`"}]},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":380}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asImmutable`"}]},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"T"}]},"line":385}]}}}]}},"Map":{"doc":{"synopsis":"Immutable Map is an unordered Iterable.Keyed of (key, value) pairs with\n`O(log32 N)` gets and `O(log32 N)` persistent sets.","description":"Iteration order of a Map is undefined, however is stable. Multiple\niterations of the same Map will iterate in the same order.\n\nMap's keys can be of any type, and use `Immutable.is` to determine key\nequality. This allows the use of any value (including NaN) as a key.\n\nBecause `Immutable.is` returns equality based on value semantics, and\nImmutable collections are treated as values, any Immutable collection may\nbe used as a key.\n\n    Map().set(List.of(1), 'listofone').get(List.of(1));\n    // 'listofone'\n\nAny JavaScript object may be used as a key, however strict identity is used\nto evaluate key equality. Two similar looking objects will represent two\ndifferent keys.\n\nImplemented by a hash-array mapped trie."},"module":{"isMap":{"call":{"doc":{"synopsis":"True if the provided value is a Map"},"signatures":[{"params":[{"name":"maybeMap","type":{"k":0}}],"type":{"k":1},"line":417}]}},"of":{"call":{"doc":{"synopsis":"Creates a new Map from alternating keys and values"},"signatures":[{"params":[{"name":"keyValues","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":0},{"k":0}]},"line":422}]}}},"call":{"doc":{"synopsis":"Creates a new Immutable Map.","description":"Created with the same key value pairs as the provided Iterable.Keyed or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.\n\n    var newMap = Map({key: \"value\"});\n    var newMap = Map([[\"key\", \"value\"]]);\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a\nquote-less shorthand, while Immutable Maps accept keys of any type.\n\n```js\nvar obj = { 1: \"one\" };\nObject.keys(obj); // [ \"1\" ]\nobj[\"1\"]; // \"one\"\nobj[1];   // \"one\"\n\nvar map = Map(obj);\nmap.get(\"1\"); // \"one\"\nmap.get(1);   // undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string,\nbut since Immutable Map keys can be of any type the argument to `get()` is\nnot altered."},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":428},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":458},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":459},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":460},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":461},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":462},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":463}]},"interface":{"line":464,"typeParams":["K","V"],"extends":[{"k":8,"name":"Collection.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"title":"Persistent changes","members":{"#set":{"doc":{"synopsis":"Returns a new Map also containing the new key, value pair. If an equivalent\nkey already exists in this Map, it will be replaced."},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":466}]},"#delete":{"doc":{"synopsis":"Returns a new Map which excludes this `key`.","notes":[{"name":"alias","body":"remove"}],"description":"Note: `delete` cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API."},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":474}]},"#clear":{"doc":{"synopsis":"Returns a new Map containing no keys or values."},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":484}]},"#update":{"doc":{"synopsis":"Returns a new Map having updated the value at this `key` with the return\nvalue of calling `updater` with the existing value, or `notSetValue` if\nthe key was not set. If called with only a single argument, `updater` is\ncalled with the Map itself.","description":"Equivalent to: `map.set(key, updater(map.get(key, notSetValue)))`."},"signatures":[{"params":[{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":489},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":499},{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","type":{"k":7,"param":"V"}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":500}]},"#merge":{"doc":{"synopsis":"Returns a new Map resulting from merging the provided Iterables\n(or JS objects) into this Map. In other words, this takes each entry of\neach iterable and sets it on this Map.","description":"If any of the values provided to `merge` are not Iterable (would return\nfalse for `Immutable.Iterable.isIterable`) then they are deeply converted\nvia `Immutable.fromJS` before being merged. However, if the value is an\nIterable but includes non-iterable JS objects or arrays, those nested\nvalues will be preserved.\n\n    var x = Immutable.Map({a: 10, b: 20, c: 30});\n    var y = Immutable.Map({b: 40, a: 50, d: 60});\n    x.merge(y) // { a: 50, b: 40, c: 30, d: 60 }\n    y.merge(x) // { b: 20, a: 10, d: 60, c: 30 }\n"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":501},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":520}]},"#mergeWith":{"doc":{"synopsis":"Like `merge()`, `mergeWith()` returns a new Map resulting from merging\nthe provided Iterables (or JS objects) into this Map, but uses the\n`merger` function for dealing with conflicts.","description":"    var x = Immutable.Map({a: 10, b: 20, c: 30});\n    var y = Immutable.Map({b: 40, a: 50, d: 60});\n    x.mergeWith((prev, next) => prev / next, y) // { a: 0.2, b: 0.5, c: 30, d: 60 }\n    y.mergeWith((prev, next) => prev / next, x) // { b: 2, a: 5, d: 60, c: 30 }\n"},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":521},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":537}]},"#mergeDeep":{"doc":{"synopsis":"Like `merge()`, but when two Iterables conflict, it merges them as well,\nrecursing deeply through the nested data.","description":"    var x = Immutable.fromJS({a: { x: 10, y: 10 }, b: { x: 20, y: 50 } });\n    var y = Immutable.fromJS({a: { x: 2 }, b: { y: 5 }, c: { z: 3 } });\n    x.mergeDeep(y) // {a: { x: 2, y: 10 }, b: { x: 20, y: 5 }, c: { z: 3 } }\n"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":541},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":552}]},"#mergeDeepWith":{"doc":{"synopsis":"Like `mergeDeep()`, but when two non-Iterables conflict, it uses the\n`merger` function to determine the resulting value.","description":"    var x = Immutable.fromJS({a: { x: 10, y: 10 }, b: { x: 20, y: 50 } });\n    var y = Immutable.fromJS({a: { x: 2 }, b: { y: 5 }, c: { z: 3 } });\n    x.mergeDeepWith((prev, next) => prev / next, y)\n    // {a: { x: 5, y: 10 }, b: { x: 20, y: 10 }, c: { z: 3 } }\n"},"signatures":[{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":553},{"params":[{"name":"merger","type":{"k":6,"params":[{"name":"previous","optional":true,"type":{"k":7,"param":"V"}},{"name":"next","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}}],"type":{"k":7,"param":"V"}}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":568}]}}},{"title":"Deep persistent changes","members":{"#setIn":{"doc":{"synopsis":"Returns a new Map having set `value` at this `keyPath`. If any keys in\n`keyPath` do not exist, a new immutable Map will be created at that key."},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"value","type":{"k":0}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":572},{"params":[{"name":"KeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"value","type":{"k":0}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":581}]},"#deleteIn":{"doc":{"synopsis":"Returns a new Map having removed the value at this `keyPath`. If any keys\nin `keyPath` do not exist, no change will occur.\n","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":582},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":590}]},"#updateIn":{"doc":{"synopsis":"Returns a new Map having applied the `updater` to the entry found at the\nkeyPath.","description":"If any keys in `keyPath` do not exist, new Immutable `Map`s will\nbe created at those keys. If the `keyPath` does not already contain a\nvalue, the `updater` function will be called with `notSetValue`, if\nprovided, otherwise `undefined`.\n\n    var data = Immutable.fromJS({ a: { b: { c: 10 } } });\n    data = data.updateIn(['a', 'b', 'c'], val => val * 2);\n    // { a: { b: { c: 20 } } }\n\nIf the `updater` function returns the same value it was called with, then\nno change will occur. This is still true if `notSetValue` is provided.\n\n    var data1 = Immutable.fromJS({ a: { b: { c: 10 } } });\n    data2 = data1.updateIn(['x', 'y', 'z'], 100, val => val);\n    assert(data2 === data1);\n"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":593},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":619},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":624},{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","type":{"k":0}},{"name":"updater","type":{"k":6,"params":[{"name":"value","type":{"k":0}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":628}]},"#mergeIn":{"doc":{"synopsis":"A combination of `updateIn` and `merge`, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:","description":"    x.updateIn(['a', 'b', 'c'], abc => abc.merge(y));\n    x.mergeIn(['a', 'b', 'c'], y);\n"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":633},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":647},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":651}]},"#mergeDeepIn":{"doc":{"synopsis":"A combination of `updateIn` and `mergeDeep`, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:","description":"    x.updateIn(['a', 'b', 'c'], abc => abc.mergeDeep(y));\n    x.mergeDeepIn(['a', 'b', 'c'], y);\n"},"signatures":[{"params":[{"name":"keyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":655},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":669},{"params":[{"name":"keyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}}],"type":{"k":8,"name":"Map","args":[{"k":3},{"k":7,"param":"V"}]},"line":673}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.","description":"If you need to apply a series of mutations to produce a new immutable\nMap, `withMutations()` creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like `merge` are done.\n\nAs an example, this results in the creation of 2, not 4, new Maps:\n\n    var map1 = Immutable.Map();\n    var map2 = map1.withMutations(map => {\n      map.set('a', 1).set('b', 2).set('c', 3);\n    });\n    assert(map1.size === 0);\n    assert(map2.size === 3);\n\nNote: Not all methods can be used on a mutable collection or within\n`withMutations`! Only `set` and `merge` may be used mutatively.\n"},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":677}]},"#asMutable":{"doc":{"synopsis":"Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies *always* return `this`,\nand thus shouldn't be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection. If possible, use `withMutations` as it provides an easier to\nuse API.","description":"Note: if the collection is already mutable, `asMutable` returns itself.\n\nNote: Not all methods can be used on a mutable collection or within\n`withMutations`! Only `set` and `merge` may be used mutatively."},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":706}]},"#asImmutable":{"doc":{"synopsis":"The yin to `asMutable`'s yang. Because it applies to mutable collections,\nthis operation is *mutable* and returns itself. Once performed, the mutable\ncopy has become immutable and can be safely returned from a function."},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":721}]}}}]}},"OrderedMap":{"doc":{"synopsis":"A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().","description":"The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.\n\nNote that `OrderedMap` are more expensive than non-ordered `Map` and may\nconsume more memory. `OrderedMap#set` is amortized O(log32 N), but not\nstable."},"module":{"isOrderedMap":{"call":{"doc":{"synopsis":"True if the provided value is an OrderedMap."},"signatures":[{"params":[{"name":"maybeOrderedMap","type":{"k":0}}],"type":{"k":1},"line":744}]}}},"call":{"doc":{"synopsis":"Creates a new Immutable OrderedMap.","description":"Created with the same key value pairs as the provided Iterable.Keyed or\nJavaScript Object or expects an Iterable of [K, V] tuple entries.\n\nThe iteration order of key-value pairs provided to this constructor will\nbe preserved in the OrderedMap.\n\n    var newOrderedMap = OrderedMap({key: \"value\"});\n    var newOrderedMap = OrderedMap([[\"key\", \"value\"]]);\n"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":750},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":765},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":766},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":767},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":3},{"k":7,"param":"V"}]},"line":768},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":769},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":770}]},"interface":{"line":771,"typeParams":["K","V"],"extends":[{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]}},"Set":{"doc":{"synopsis":"A Collection of unique values with `O(log32 N)` adds and has.","description":"When iterating a Set, the entries will be (value, value) pairs. Iteration\norder of a Set is undefined, however is stable. Multiple iterations of the\nsame Set will iterate in the same order.\n\nSet values, like Map keys, may be of any type. Equality is determined using\n`Immutable.is`, enabling Sets to uniquely include other Immutable\ncollections, custom value types, and NaN."},"module":{"isSet":{"call":{"doc":{"synopsis":"True if the provided value is a Set"},"signatures":[{"params":[{"name":"maybeSet","type":{"k":0}}],"type":{"k":1},"line":787}]}},"of":{"call":{"doc":{"synopsis":"Creates a new Set containing `values`."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":792}]}},"fromKeys":{"call":{"doc":{"synopsis":"`Set.fromKeys()` creates a new immutable Set containing the keys from\nthis Iterable or JavaScript Object."},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":797},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"Set","args":[{"k":3}]},"line":803}]}}},"call":{"doc":{"synopsis":"Create a new immutable Set containing the values of the provided\niterable-like."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":805},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":811},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":812},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Set","args":[{"k":0}]},"line":813},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":814},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":815},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":816}]},"interface":{"line":817,"typeParams":["T"],"extends":[{"k":8,"name":"Collection.Set","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Persistent changes","members":{"#add":{"doc":{"synopsis":"Returns a new Set which also includes this value."},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":819}]},"#delete":{"doc":{"synopsis":"Returns a new Set which excludes this value.","notes":[{"name":"alias","body":"remove"}],"description":"Note: `delete` cannot be safely used in IE8"},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":826}]},"#clear":{"doc":{"synopsis":"Returns a new Set containing no values."},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":835}]},"#union":{"doc":{"synopsis":"Returns a Set including any value from `iterables` that does not already\nexist in this Set.","notes":[{"name":"alias","body":"merge"}]},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":840},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":847}]},"#intersect":{"doc":{"synopsis":"Returns a Set which has removed any values not also contained\nwithin `iterables`."},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":850},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":857}]},"#subtract":{"doc":{"synopsis":"Returns a Set excluding any values contained within `iterables`."},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":858},{"params":[{"name":"iterables","varArgs":true,"type":{"k":5,"type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":863}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"Note: Not all methods can be used on a mutable collection or within\n`withMutations`! Only `add` may be used mutatively.\n","notes":[{"name":"see","body":"`Map#withMutations`"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":864}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asMutable`"}]},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":875}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asImmutable`"}]},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]},"line":880}]}}}]}},"OrderedSet":{"doc":{"synopsis":"A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were `add`ed.","description":"The iteration behavior of OrderedSet is the same as native ES6 Set.\n\nNote that `OrderedSet` are more expensive than non-ordered `Set` and may\nconsume more memory. `OrderedSet#add` is amortized O(log32 N), but not\nstable."},"module":{"isOrderedSet":{"call":{"doc":{"synopsis":"True if the provided value is an OrderedSet."},"signatures":[{"params":[{"name":"maybeOrderedSet","type":{"k":0}}],"type":{"k":1},"line":899}]}},"of":{"call":{"doc":{"synopsis":"Creates a new OrderedSet containing `values`."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":904}]}},"fromKeys":{"call":{"doc":{"synopsis":"`OrderedSet.fromKeys()` creates a new immutable OrderedSet containing\nthe keys from this Iterable or JavaScript Object."},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":0}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":909},{"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":3}]},"line":915}]}}},"call":{"doc":{"synopsis":"Create a new immutable OrderedSet containing the values of the provided\niterable-like."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":917},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":923},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":924},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":0}]},"line":925},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":926},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":927},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"T"}]},"line":928}]},"interface":{"line":929,"typeParams":["T"],"extends":[{"k":8,"name":"Set","args":[{"k":7,"param":"T"}]}]}},"Stack":{"doc":{"synopsis":"Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using `unshift(v)` and `shift()`.","description":"For familiarity, Stack also provides `push(v)`, `pop()`, and `peek()`, but\nbe aware that they also operate on the front of the list, unlike List or\na JavaScript Array.\n\nNote: `reverse()` or any inherent reverse traversal (`reduceRight`,\n`lastIndexOf`, etc.) is not efficient with a Stack.\n\nStack is implemented with a Single-Linked List."},"module":{"isStack":{"call":{"doc":{"synopsis":"True if the provided value is a Stack"},"signatures":[{"params":[{"name":"maybeStack","type":{"k":0}}],"type":{"k":1},"line":947}]}},"of":{"call":{"doc":{"synopsis":"Creates a new Stack containing `values`."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":952}]}}},"call":{"doc":{"synopsis":"Create a new immutable Stack containing the values of the provided\niterable-like.","description":"The iteration order of the provided iterable is preserved in the\nresulting `Stack`."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":958},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":967},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":968},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":0}]},"line":969},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":970},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":971},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":972}]},"interface":{"line":973,"typeParams":["T"],"extends":[{"k":8,"name":"Collection.Indexed","args":[{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","members":{"#peek":{"doc":{"synopsis":"Alias for `Stack.first()`."},"signatures":[{"type":{"k":7,"param":"T"},"line":975}]}}},{"title":"Persistent changes","members":{"#clear":{"doc":{"synopsis":"Returns a new Stack with 0 size and no values."},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":982}]},"#unshift":{"doc":{"synopsis":"Returns a new Stack with the provided `values` prepended, shifting other\nvalues ahead to higher indices.","description":"This is very efficient for Stack."},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":990}]},"#unshiftAll":{"doc":{"synopsis":"Like `Stack#unshift`, but accepts a iterable rather than varargs."},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":998},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1003}]},"#shift":{"doc":{"synopsis":"Returns a new Stack with a size ones less than this Stack, excluding\nthe first item in this Stack, shifting all other values to a lower index.","description":"Note: this differs from `Array#shift` because it returns a new\nStack rather than the removed value. Use `first()` or `peek()` to get the\nfirst value in this Stack."},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1004}]},"#push":{"doc":{"synopsis":"Alias for `Stack#unshift` and is not equivalent to `List#push`."},"signatures":[{"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1014}]},"#pushAll":{"doc":{"synopsis":"Alias for `Stack#unshiftAll`."},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1019},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1024}]},"#pop":{"doc":{"synopsis":"Alias for `Stack#shift` and is not equivalent to `List#pop`."},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1025}]}}},{"title":"Transient changes","members":{"#withMutations":{"doc":{"synopsis":"Note: Not all methods can be used on a mutable collection or within\n`withMutations`! Only `set`, `push`, and `pop` may be used mutatively.\n","notes":[{"name":"see","body":"`Map#withMutations`"}]},"signatures":[{"params":[{"name":"mutator","type":{"k":6,"params":[{"name":"mutable","type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]}}],"type":{"k":0}}}],"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1030}]},"#asMutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asMutable`"}]},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1041}]},"#asImmutable":{"doc":{"synopsis":"","notes":[{"name":"see","body":"`Map#asImmutable`"}]},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"T"}]},"line":1046}]}}}]}},"Range":{"call":{"doc":{"synopsis":"Returns a Seq.Indexed of numbers from `start` (inclusive) to `end`\n(exclusive), by `step`, where `start` defaults to 0, `step` to 1, and `end` to\ninfinity. When `start` is equal to `end`, returns empty range.","description":"    Range() // [0,1,2,3,...]\n    Range(10) // [10,11,12,13,...]\n    Range(10,15) // [10,11,12,13,14]\n    Range(10,30,5) // [10,15,20,25]\n    Range(30,10,5) // [30,25,20,15]\n    Range(30,30,5) // []\n"},"signatures":[{"params":[{"name":"start","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}},{"name":"step","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":2}]},"line":1052}]}},"Repeat":{"call":{"doc":{"synopsis":"Returns a Seq.Indexed of `value` repeated `times` times. When `times` is\nnot defined, returns an infinite `Seq` of `value`.","description":"    Repeat('foo') // ['foo','foo','foo',...]\n    Repeat('bar',4) // ['bar','bar','bar','bar']\n"},"signatures":[{"typeParams":["T"],"params":[{"name":"value","type":{"k":7,"param":"T"}},{"name":"times","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1068}]}},"Record":{"doc":{"synopsis":"Creates a new Class which produces Record instances. A record is similar to\na JS object, but enforce a specific set of allowed string keys, and have\ndefault values.","description":"    var ABRecord = Record({a:1, b:2})\n    var myRecord = new ABRecord({b:3})\n\nRecords always have a value for the keys they define. `remove`ing a key\nfrom a record simply resets it to the default value for that key.\n\n    myRecord.size // 2\n    myRecord.get('a') // 1\n    myRecord.get('b') // 3\n    myRecordWithoutB = myRecord.remove('b')\n    myRecordWithoutB.get('b') // 2\n    myRecordWithoutB.size // 2\n\nValues provided to the constructor not found in the Record type will\nbe ignored. For example, in this case, ABRecord is provided a key \"x\" even\nthough only \"a\" and \"b\" have been defined. The value for \"x\" will be\nignored for this record.\n\n    var myRecord = new ABRecord({b:3, x:10})\n    myRecord.get('x') // undefined\n\nBecause Records have a known set of string keys, property get access works\nas expected, however property sets will throw an Error.\n\nNote: IE8 does not support property access. Only use `get()` when\nsupporting IE8.\n\n    myRecord.b // 3\n    myRecord.b = 5 // throws Error\n\nRecord Classes can be extended as well, allowing for custom methods on your\nRecord. This is not a common pattern in functional environments, but is in\nmany JS programs.\n\nNote: TypeScript does not support this type of subclassing.\n\n    class ABRecord extends Record({a:1,b:2}) {\n      getAB() {\n        return this.a + this.b;\n      }\n    }\n\n    var myRecord = new ABRecord({b: 3})\n    myRecord.getAB() // 4\n"},"module":{"Class":{"interface":{"line":1133}}},"call":{"signatures":[{"params":[{"name":"defaultValues","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":0}}]}},{"name":"name","optional":true,"type":{"k":3}}],"type":{"k":8,"name":"Class","qualifier":["Record"]},"line":1143}]}},"Seq":{"doc":{"synopsis":"Represents a sequence of values, but may not be backed by a concrete data\nstructure.","description":"**Seq is immutable** — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any\nmutative method called on a `Seq` will return a new `Seq`.\n\n**Seq is lazy** — Seq does as little work as necessary to respond to any\nmethod call. Values are often created during iteration, including implicit\niteration when reducing or converting to a concrete data structure such as\na `List` or JavaScript `Array`.\n\nFor example, the following performs no work, because the resulting\nSeq's values are never iterated:\n\n    var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n      .filter(x => x % 2).map(x => x * x);\n\nOnce the Seq is used, it performs only the work necessary. In this\nexample, no intermediate data structures are ever created, filter is only\ncalled three times, and map is only called once:\n\n    console.log(oddSquares.get(1)); // 9\n\nSeq allows for the efficient chaining of operations,\nallowing for the expression of logic that can otherwise be very tedious:\n\n    Immutable.Seq({a:1, b:1, c:1})\n      .flip().map(key => key.toUpperCase()).flip().toObject();\n    // Map { A: 1, B: 1, C: 1 }\n\nAs well as expressing logic that would otherwise be memory or time limited:\n\n    Immutable.Range(1, Infinity)\n      .skip(1000)\n      .map(n => -n)\n      .filter(n => n % 2 === 0)\n      .take(2)\n      .reduce((r, n) => r * n, 1);\n    // 1006008\n\nSeq is often used to provide a rich collection API to JavaScript Object.\n\n    Immutable.Seq({ x: 0, y: 1, z: 2 }).map(v => v * 2).toObject();\n    // { x: 0, y: 2, z: 4 }"},"module":{"isSeq":{"call":{"doc":{"synopsis":"True if `maybeSeq` is a Seq, it is not backed by a concrete\nstructure such as Map, List, or Set."},"signatures":[{"params":[{"name":"maybeSeq","type":{"k":0}}],"type":{"k":1},"line":1198}]}},"of":{"call":{"doc":{"synopsis":"Returns a Seq of the values provided. Alias for `Seq.Indexed.of()`."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1203}]}},"Keyed":{"doc":{"synopsis":"`Seq` which represents key-value pairs."},"module":{},"call":{"doc":{"synopsis":"Always returns a Seq.Keyed, if input is not keyed, expects an\niterable of [K, V] tuples."},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1214},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1220},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1221},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1222},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":3},{"k":7,"param":"V"}]},"line":1223},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1224},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1225}]},"interface":{"line":1226,"typeParams":["K","V"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns itself"},"signatures":[{"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1228}]}}}]}},"Indexed":{"doc":{"synopsis":"`Seq` which represents an ordered indexed list of values."},"module":{"of":{"call":{"doc":{"synopsis":"Provides an Seq.Indexed of the values provided."},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1240}]}}},"call":{"doc":{"synopsis":"Always returns Seq.Indexed, discarding associated keys and\nsupplying incrementing indices."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1246},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1252},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1253},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":0}]},"line":1254},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1255},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1256},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1257}]},"interface":{"line":1258,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns itself"},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1260}]}}}]}},"Set":{"doc":{"synopsis":"`Seq` which represents a set of values.","description":"Because `Seq` are often lazy, `Seq.Set` does not provide the same guarantee\nof value uniqueness as the concrete `Set`."},"module":{"of":{"call":{"doc":{"synopsis":"Returns a Seq.Set of the provided values"},"signatures":[{"typeParams":["T"],"params":[{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":7,"param":"T"}}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1275}]}}},"call":{"doc":{"synopsis":"Always returns a Seq.Set, discarding associated indices or keys."},"signatures":[{"typeParams":["T"],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1281},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1286},{"typeParams":["T"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1287},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":0}]},"line":1288},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1289},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1290},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1291}]},"interface":{"line":1292,"typeParams":["T"],"extends":[{"k":8,"name":"Seq","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns itself"},"signatures":[{"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1294}]}}}]}}},"call":{"doc":{"synopsis":"Creates a Seq.","description":"Returns a particular kind of `Seq` based on the input.\n\n  * If a `Seq`, that same `Seq`.\n  * If an `Iterable`, a `Seq` of the same kind (Keyed, Indexed, or Set).\n  * If an Array-like, an `Seq.Indexed`.\n  * If an Object with an Iterator, an `Seq.Indexed`.\n  * If an Iterator, an `Seq.Indexed`.\n  * If an Object, a `Seq.Keyed`.\n"},"signatures":[{"typeParams":["K","V"],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1302},{"typeParams":["K","V"],"params":[{"name":"seq","type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1317},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1318},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1319},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":3},{"k":7,"param":"V"}]},"line":1320},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1321},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1322}]},"interface":{"line":1323,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#size":{"line":1325,"type":{"k":2}}}},{"title":"Force evaluation","members":{"#cacheResult":{"doc":{"synopsis":"Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each `join` iterates the Seq of three values.","description":"    var squares = Seq.of(1,2,3).map(x => x * x);\n    squares.join() + squares.join();\n\nIf you know a `Seq` will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.\n\n    var squares = Seq.of(1,2,3).map(x => x * x).cacheResult();\n    squares.join() + squares.join();\n\nUse this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.\n\nNote: after calling `cacheResult`, a Seq will always have a `size`."},"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1337}]}}}]}},"Iterable":{"doc":{"synopsis":"The `Iterable` is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in `immutable`, allowing them to\nmake use of all the Iterable methods (such as `map` and `filter`).","description":"Note: An iterable is always iterated in the same order, however that order\nmay not always be well defined, as is the case for the `Map` and `Set`."},"module":{"isIterable":{"call":{"doc":{"synopsis":"True if `maybeIterable` is an Iterable, or any of its subclasses."},"signatures":[{"params":[{"name":"maybeIterable","type":{"k":0}}],"type":{"k":1},"line":1373}]}},"isKeyed":{"call":{"doc":{"synopsis":"True if `maybeKeyed` is an Iterable.Keyed, or any of its subclasses."},"signatures":[{"params":[{"name":"maybeKeyed","type":{"k":0}}],"type":{"k":1},"line":1377}]}},"isIndexed":{"call":{"doc":{"synopsis":"True if `maybeIndexed` is a Iterable.Indexed, or any of its subclasses."},"signatures":[{"params":[{"name":"maybeIndexed","type":{"k":0}}],"type":{"k":1},"line":1382}]}},"isAssociative":{"call":{"doc":{"synopsis":"True if `maybeAssociative` is either a keyed or indexed Iterable."},"signatures":[{"params":[{"name":"maybeAssociative","type":{"k":0}}],"type":{"k":1},"line":1387}]}},"isOrdered":{"call":{"doc":{"synopsis":"True if `maybeOrdered` is an Iterable where iteration order is well\ndefined. True for Iterable.Indexed as well as OrderedMap and OrderedSet."},"signatures":[{"params":[{"name":"maybeOrdered","type":{"k":0}}],"type":{"k":1},"line":1392}]}},"Keyed":{"doc":{"synopsis":"Keyed Iterables have discrete keys tied to each value.","description":"When iterating `Iterable.Keyed`, each iteration will yield a `[K, V]`\ntuple, in other words, `Iterable#entries` is the default iterator for\nKeyed Iterables."},"module":{},"call":{"doc":{"synopsis":"Creates an Iterable.Keyed","description":"Similar to `Iterable()`, however it expects iterable-likes of [K, V]\ntuples if not constructed from a Iterable.Keyed or JS Object."},"signatures":[{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1408},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1416},{"typeParams":["K","V"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1417},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":3},{"k":7,"param":"V"}]},"line":1418},{"typeParams":["K","V"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":0}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1419},{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1420}]},"interface":{"line":1421,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Keyed."},"signatures":[{"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1423}]}}},{"title":"Sequence functions","members":{"#flip":{"doc":{"synopsis":"Returns a new Iterable.Keyed of the same type where the keys and values\nhave been flipped.","description":"    Seq({ a: 'z', b: 'y' }).flip() // { z: 'a', y: 'b' }\n"},"signatures":[{"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"V"},{"k":7,"param":"K"}]},"line":1429}]},"#mapKeys":{"doc":{"synopsis":"Returns a new Iterable.Keyed of the same type with keys passed through\na `mapper` function.","description":"    Seq({ a: 1, b: 2 })\n      .mapKeys(x => x.toUpperCase())\n    // Seq { A: 1, B: 2 }\n"},"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"M"},{"k":7,"param":"V"}]},"line":1441}]},"#mapEntries":{"doc":{"synopsis":"Returns a new Iterable.Keyed of the same type with entries\n([key, value] tuples) passed through a `mapper` function.","description":"    Seq({ a: 1, b: 2 })\n      .mapEntries(([k, v]) => [k.toUpperCase(), v * 2])\n    // Seq { A: 2, B: 4 }\n"},"signatures":[{"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"entry","optional":true,"type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Array","args":[{"k":0}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"KM"},{"k":7,"param":"VM"}]},"line":1455}]}}}]}},"Indexed":{"doc":{"synopsis":"Indexed Iterables have incrementing numeric keys. They exhibit\nslightly different behavior than `Iterable.Keyed` for some methods in order\nto better mirror the behavior of JavaScript's `Array`, and add methods\nwhich do not make sense on non-indexed Iterables such as `indexOf`.","description":"Unlike JavaScript arrays, `Iterable.Indexed`s are always dense. \"Unset\"\nindices and `undefined` indices are indistinguishable, and all indices from\n0 to `size` are visited when iterated.\n\nAll Iterable.Indexed methods return re-indexed Iterables. In other words,\nindices always start at 0 and increment until size. If you wish to\npreserve indices, using them as keys, convert to a Iterable.Keyed by\ncalling `toKeyedSeq`."},"module":{},"call":{"doc":{"synopsis":"Creates a new Iterable.Indexed."},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1492},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1497},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":0}]},"line":1498},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1499},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1500},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1501}]},"interface":{"line":1502,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":2},{"k":7,"param":"T"}]}],"groups":[{"title":"Reading values","members":{"#get":{"doc":{"synopsis":"Returns the value associated with the provided index, or notSetValue if\nthe index is beyond the bounds of the Iterable.","description":"`index` may be a negative number, which indexes back from the end of the\nIterable. `s.get(-1)` gets the last item in the Iterable."},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"T"}}],"type":{"k":7,"param":"T"},"line":1504}]}}},{"title":"Conversion to Seq","members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Indexed."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":1515}]},"#fromEntrySeq":{"doc":{"synopsis":"If this is an iterable of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries."},"signatures":[{"type":{"k":8,"name":"Seq.Keyed","args":[{"k":0},{"k":0}]},"line":1524}]}}},{"title":"Combination","members":{"#interpose":{"doc":{"synopsis":"Returns an Iterable of the same type with `separator` between each item\nin this Iterable."},"signatures":[{"params":[{"name":"separator","type":{"k":7,"param":"T"}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1530}]},"#interleave":{"doc":{"synopsis":"Returns an Iterable of the same type with the provided `iterables`\ninterleaved into this iterable.","description":"The resulting Iterable includes the first item from each, then the\nsecond from each, etc.\n\n    I.Seq.of(1,2,3).interleave(I.Seq.of('A','B','C'))\n    // Seq [ 1, 'A', 2, 'B', 3, 'C' ]\n\nThe shortest Iterable stops interleave.\n\n    I.Seq.of(1,2,3).interleave(\n      I.Seq.of('A','B'),\n      I.Seq.of('X','Y','Z')\n    )\n    // Seq [ 1, 'A', 'X', 2, 'B', 'Y' ]"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":8,"name":"Array","args":[{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"T"}]}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1539}]},"#splice":{"doc":{"synopsis":"Splice returns a new indexed Iterable by replacing a region of this\nIterable with new values. If values are not provided, it only skips the\nregion to be removed.","description":"`index` may be a negative number, which indexes back from the end of the\nIterable. `s.splice(-2)` splices after the second to last item.\n\n    Seq(['a','b','c','d']).splice(1, 2, 'q', 'r', 's')\n    // Seq ['a', 'q', 'r', 's', 'd']\n"},"signatures":[{"params":[{"name":"index","type":{"k":2}},{"name":"removeNum","type":{"k":2}},{"name":"values","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1559}]},"#zip":{"doc":{"synopsis":"Returns an Iterable of the same type \"zipped\" with the provided\niterables.","description":"Like `zipWith`, but using the default `zipper`: creating an `Array`.\n\n    var a = Seq.of(1, 2, 3);\n    var b = Seq.of(4, 5, 6);\n    var c = a.zip(b); // Seq [ [ 1, 4 ], [ 2, 5 ], [ 3, 6 ] ]\n"},"signatures":[{"params":[{"name":"iterables","varArgs":true,"type":{"k":8,"name":"Array","args":[{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":0}]},"line":1577}]},"#zipWith":{"doc":{"synopsis":"Returns an Iterable of the same type \"zipped\" with the provided\niterables by using a custom `zipper` function.","description":"    var a = Seq.of(1, 2, 3);\n    var b = Seq.of(4, 5, 6);\n    var c = a.zipWith((a, b) => a + b, b); // Seq [ 5, 7, 9 ]\n"},"signatures":[{"typeParams":["U","Z"],"params":[{"name":"zipper","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}},{"name":"otherValue","type":{"k":7,"param":"U"}}],"type":{"k":7,"param":"Z"}}},{"name":"otherIterable","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"U"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"Z"}]},"line":1590},{"typeParams":["U","V","Z"],"params":[{"name":"zipper","type":{"k":6,"params":[{"name":"value","type":{"k":7,"param":"T"}},{"name":"otherValue","type":{"k":7,"param":"U"}},{"name":"thirdValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"Z"}}},{"name":"otherIterable","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"U"}]}},{"name":"thirdIterable","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"Z"}]},"line":1604},{"typeParams":["Z"],"params":[{"name":"zipper","type":{"k":6,"params":[{"name":"any","varArgs":true,"type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":7,"param":"Z"}}},{"name":"iterables","varArgs":true,"type":{"k":8,"name":"Array","args":[{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"Z"}]},"line":1609}]}}},{"title":"Search for value","members":{"#indexOf":{"doc":{"synopsis":"Returns the first index at which a given value can be found in the\nIterable, or -1 if it is not present."},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":1613}]},"#lastIndexOf":{"doc":{"synopsis":"Returns the last index at which a given value can be found in the\nIterable, or -1 if it is not present."},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"T"}}],"type":{"k":2},"line":1622}]},"#findIndex":{"doc":{"synopsis":"Returns the first index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1628}]},"#findLastIndex":{"doc":{"synopsis":"Returns the last index in the Iterable where a value satisfies the\nprovided predicate function. Otherwise -1 is returned."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"T"}},{"name":"index","optional":true,"type":{"k":2}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":1637}]}}}]}},"Set":{"doc":{"synopsis":"Set Iterables only represent values. They have no associated keys or\nindices. Duplicate values are possible in Seq.Sets, however the\nconcrete `Set` does not allow duplicate values.","description":"Iterable methods on Iterable.Set such as `map` and `forEach` will provide\nthe value as both the first and second arguments to the provided function.\n\n    var seq = Seq.Set.of('A', 'B', 'C');\n    assert.equal(seq.every((v, k) => v === k), true);\n"},"module":{},"call":{"doc":{"synopsis":"Similar to `Iterable()`, but always returns a Iterable.Set."},"signatures":[{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]},"line":1662},{"typeParams":["T"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]},"line":1667},{"typeParams":["K","V"],"params":[{"name":"iter","type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":0}]},"line":1668},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]},"line":1669},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]},"line":1670},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]},"line":1671}]},"interface":{"line":1672,"typeParams":["T"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Set."},"signatures":[{"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":1674}]}}}]}}},"call":{"doc":{"synopsis":"Creates an Iterable.","description":"The type of Iterable created is based on the input.\n\n  * If an `Iterable`, that same `Iterable`.\n  * If an Array-like, an `Iterable.Indexed`.\n  * If an Object with an Iterator, an `Iterable.Indexed`.\n  * If an Iterator, an `Iterable.Indexed`.\n  * If an Object, an `Iterable.Keyed`.\n\nThis methods forces the conversion of Objects and Strings to Iterables.\nIf you want to ensure that a Iterable of one item is returned, use\n`Seq.of`."},"signatures":[{"typeParams":["K","V"],"params":[{"name":"iterable","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1683},{"typeParams":["T"],"params":[{"name":"array","type":{"k":8,"name":"Array","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1700},{"typeParams":["V"],"params":[{"name":"obj","type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]}}],"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":3},{"k":7,"param":"V"}]},"line":1701},{"typeParams":["T"],"params":[{"name":"iterator","type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"T"}]}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1702},{"typeParams":["T"],"params":[{"name":"iterable","type":{"k":8,"name":"Object"}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]},"line":1703},{"typeParams":["V"],"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"V"}]},"line":1704}]},"interface":{"line":1705,"typeParams":["K","V"],"groups":[{"title":"Value equality","members":{"#equals":{"doc":{"synopsis":"True if this and the other Iterable have value equality, as defined\nby `Immutable.is()`.","description":"Note: This is equivalent to `Immutable.is(this, other)`, but provided to\nallow for chained expressions."},"signatures":[{"params":[{"name":"other","type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":1707}]},"#hashCode":{"doc":{"synopsis":"Computes and returns the hashed identity for this Iterable.","description":"The `hashCode` of an Iterable is used to determine potential equality,\nand is used when adding this to a `Set` or as a key in a `Map`, enabling\nlookup via a different instance.\n\n    var a = List.of(1, 2, 3);\n    var b = List.of(1, 2, 3);\n    assert(a !== b); // different instances\n    var set = Set.of(a);\n    assert(set.has(b) === true);\n\nIf two values have the same `hashCode`, they are [not guaranteed\nto be equal][Hash Collision]. If two values have different `hashCode`s,\nthey must not be equal.\n\n[Hash Collision]: http://en.wikipedia.org/wiki/Collision_(computer_science)"},"signatures":[{"type":{"k":2},"line":1718}]}}},{"title":"Reading values","members":{"#get":{"doc":{"synopsis":"Returns the value associated with the provided key, or notSetValue if\nthe Iterable does not contain this key.","description":"Note: it is possible a key may be associated with an `undefined` value,\nso if `notSetValue` is not provided and this method returns `undefined`,\nthat does not guarantee the key was not found."},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":1739}]},"#has":{"doc":{"synopsis":"True if a key exists within this `Iterable`, using `Immutable.is` to determine equality"},"signatures":[{"params":[{"name":"key","type":{"k":7,"param":"K"}}],"type":{"k":1},"line":1752}]},"#includes":{"doc":{"synopsis":"True if a value exists within this `Iterable`, using `Immutable.is` to determine equality","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"params":[{"name":"value","type":{"k":7,"param":"V"}}],"type":{"k":1},"line":1757}]},"#first":{"doc":{"synopsis":"The first value in the Iterable."},"signatures":[{"type":{"k":7,"param":"V"},"line":1764}]},"#last":{"doc":{"synopsis":"The last value in the Iterable."},"signatures":[{"type":{"k":7,"param":"V"},"line":1769}]}}},{"title":"Reading deep values","members":{"#getIn":{"doc":{"synopsis":"Returns the value found by following a path of keys or indices through\nnested Iterables."},"signatures":[{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1774},{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}},{"name":"notSetValue","optional":true,"type":{"k":0}}],"type":{"k":0},"line":1783}]},"#hasIn":{"doc":{"synopsis":"True if the result of following a path of keys or indices through nested\nIterables results in a set value."},"signatures":[{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Array","args":[{"k":0}]}}],"type":{"k":1},"line":1784},{"params":[{"name":"searchKeyPath","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]}}],"type":{"k":1},"line":1790}]}}},{"title":"Conversion to JavaScript types","members":{"#toJS":{"doc":{"synopsis":"Deeply converts this Iterable to equivalent JS.","notes":[{"name":"alias","body":"toJSON"}],"description":"`Iterable.Indexeds`, and `Iterable.Sets` become Arrays, while\n`Iterable.Keyeds` become Objects.\n"},"signatures":[{"type":{"k":0},"line":1791}]},"#toArray":{"doc":{"synopsis":"Shallowly converts this iterable to an Array, discarding keys."},"signatures":[{"type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]},"line":1804}]},"#toObject":{"doc":{"synopsis":"Shallowly converts this Iterable to an Object.","description":"Throws if keys are not strings."},"signatures":[{"type":{"k":4,"members":[{"index":true,"params":[{"name":"key","type":{"k":3}}],"type":{"k":7,"param":"V"}}]},"line":1809}]}}},{"title":"Conversion to Collections","members":{"#toMap":{"doc":{"synopsis":"Converts this Iterable to a Map, Throws if keys are not hashable.","description":"Note: This is equivalent to `Map(this.toKeyedSeq())`, but provided\nfor convenience and to allow for chained expressions."},"signatures":[{"type":{"k":8,"name":"Map","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1816}]},"#toOrderedMap":{"doc":{"synopsis":"Converts this Iterable to a Map, maintaining the order of iteration.","description":"Note: This is equivalent to `OrderedMap(this.toKeyedSeq())`, but\nprovided for convenience and to allow for chained expressions."},"signatures":[{"type":{"k":8,"name":"OrderedMap","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1827}]},"#toSet":{"doc":{"synopsis":"Converts this Iterable to a Set, discarding keys. Throws if values\nare not hashable.","description":"Note: This is equivalent to `Set(this)`, but provided to allow for\nchained expressions."},"signatures":[{"type":{"k":8,"name":"Set","args":[{"k":7,"param":"V"}]},"line":1835}]},"#toOrderedSet":{"doc":{"synopsis":"Converts this Iterable to a Set, maintaining the order of iteration and\ndiscarding keys.","description":"Note: This is equivalent to `OrderedSet(this.valueSeq())`, but provided\nfor convenience and to allow for chained expressions."},"signatures":[{"type":{"k":8,"name":"OrderedSet","args":[{"k":7,"param":"V"}]},"line":1844}]},"#toList":{"doc":{"synopsis":"Converts this Iterable to a List, discarding keys.","description":"Note: This is equivalent to `List(this)`, but provided to allow\nfor chained expressions."},"signatures":[{"type":{"k":8,"name":"List","args":[{"k":7,"param":"V"}]},"line":1853}]},"#toStack":{"doc":{"synopsis":"Converts this Iterable to a Stack, discarding keys. Throws if values\nare not hashable.","description":"Note: This is equivalent to `Stack(this)`, but provided to allow for\nchained expressions."},"signatures":[{"type":{"k":8,"name":"Stack","args":[{"k":7,"param":"V"}]},"line":1861}]}}},{"title":"Conversion to Seq","members":{"#toSeq":{"doc":{"synopsis":"Converts this Iterable to a Seq of the same kind (indexed,\nkeyed, or set)."},"signatures":[{"type":{"k":8,"name":"Seq","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1870}]},"#toKeyedSeq":{"doc":{"synopsis":"Returns a Seq.Keyed from this Iterable where indices are treated as keys.","description":"This is useful if you want to operate on an\nIterable.Indexed and preserve the [index, value] pairs.\n\nThe returned Seq will have identical iteration order as\nthis Iterable.\n\nExample:\n\n    var indexedSeq = Immutable.Seq.of('A', 'B', 'C');\n    indexedSeq.filter(v => v === 'B').toString() // Seq [ 'B' ]\n    var keyedSeq = indexedSeq.toKeyedSeq();\n    keyedSeq.filter(v => v === 'B').toString() // Seq { 1: 'B' }\n"},"signatures":[{"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1879}]},"#toIndexedSeq":{"doc":{"synopsis":"Returns an Seq.Indexed of the values of this Iterable, discarding keys."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"V"}]},"line":1898}]},"#toSetSeq":{"doc":{"synopsis":"Returns a Seq.Set of the values of this Iterable, discarding keys."},"signatures":[{"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"V"}]},"line":1903}]}}},{"title":"Iterators","members":{"#keys":{"doc":{"synopsis":"An iterator of this `Iterable`'s keys.","description":"Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use `keySeq` instead, if this is what you want."},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"K"}]},"line":1908}]},"#values":{"doc":{"synopsis":"An iterator of this `Iterable`'s values.","description":"Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use `valueSeq` instead, if this is what you want."},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":7,"param":"V"}]},"line":1918}]},"#entries":{"doc":{"synopsis":"An iterator of this `Iterable`'s entries as `[key, value]` tuples.","description":"Note: this will return an ES6 iterator which does not support Immutable JS sequence algorithms. Use `entrySeq` instead, if this is what you want."},"signatures":[{"type":{"k":8,"name":"Iterator","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1925}]}}},{"title":"Iterables (Seq)","members":{"#keySeq":{"doc":{"synopsis":"Returns a new Seq.Indexed of the keys of this Iterable,\ndiscarding values."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"K"}]},"line":1932}]},"#valueSeq":{"doc":{"synopsis":"Returns an Seq.Indexed of the values of this Iterable, discarding keys."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"V"}]},"line":1941}]},"#entrySeq":{"doc":{"synopsis":"Returns a new Seq.Indexed of [key, value] tuples."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":8,"name":"Array","args":[{"k":0}]}]},"line":1946}]}}},{"title":"Sequence algorithms","members":{"#map":{"doc":{"synopsis":"Returns a new Iterable of the same type with values passed through a\n`mapper` function.","description":"    Seq({ a: 1, b: 2 }).map(x => 10 * x)\n    // Seq { a: 10, b: 20 }\n"},"signatures":[{"typeParams":["M"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"M"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"M"}]},"line":1951}]},"#filter":{"doc":{"synopsis":"Returns a new Iterable of the same type with only the entries for which\nthe `predicate` function returns true.","description":"    Seq({a:1,b:2,c:3,d:4}).filter(x => x % 2 === 0)\n    // Seq { b: 2, d: 4 }\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1967}]},"#filterNot":{"doc":{"synopsis":"Returns a new Iterable of the same type with only the entries for which\nthe `predicate` function returns false.","description":"    Seq({a:1,b:2,c:3,d:4}).filterNot(x => x % 2 === 0)\n    // Seq { a: 1, c: 3 }\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1980}]},"#reverse":{"doc":{"synopsis":"Returns a new Iterable of the same type in reverse order."},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1993}]},"#sort":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes the same entries,\nstably sorted by using a `comparator`.","description":"If a `comparator` is not provided, a default comparator uses `<` and `>`.\n\n`comparator(valueA, valueB)`:\n\n  * Returns `0` if the elements should not be swapped.\n  * Returns `-1` (or any negative number) if `valueA` comes before `valueB`\n  * Returns `1` (or any positive number) if `valueA` comes after `valueB`\n  * Is pure, i.e. it must always return the same value for the same pair\n    of values.\n\nWhen sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. `map.sort()` returns OrderedMap."},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":1998}]},"#sortBy":{"doc":{"synopsis":"Like `sort`, but also accepts a `comparatorValueMapper` which allows for\nsorting by more sophisticated means:","description":"    hitters.sortBy(hitter => hitter.avgHits);\n"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2017}]},"#groupBy":{"doc":{"synopsis":"Returns a `Iterable.Keyed` of `Iterable.Keyeds`, grouped by the return\nvalue of the `grouper` function.","description":"Note: This is always an eager operation."},"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"G"},{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}]},"line":2029}]}}},{"title":"Side effects","members":{"#forEach":{"doc":{"synopsis":"The `sideEffect` is executed for every entry in the Iterable.","description":"Unlike `Array#forEach`, if any call of `sideEffect` returns\n`false`, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false)."},"signatures":[{"params":[{"name":"sideEffect","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2040}]}}},{"title":"Creating subsets","members":{"#slice":{"doc":{"synopsis":"Returns a new Iterable of the same type representing a portion of this\nIterable from start up to but not including end.","description":"If begin is negative, it is offset from the end of the Iterable. e.g.\n`slice(-2)` returns a Iterable of the last two entries. If it is not\nprovided the new Iterable will begin at the beginning of this Iterable.\n\nIf end is negative, it is offset from the end of the Iterable. e.g.\n`slice(0, -1)` returns an Iterable of everything but the last entry. If\nit is not provided, the new Iterable will continue through the end of\nthis Iterable.\n\nIf the requested slice is equivalent to the current Iterable, then it\nwill return itself."},"signatures":[{"params":[{"name":"begin","optional":true,"type":{"k":2}},{"name":"end","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2055}]},"#rest":{"doc":{"synopsis":"Returns a new Iterable of the same type containing all entries except\nthe first."},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2076}]},"#butLast":{"doc":{"synopsis":"Returns a new Iterable of the same type containing all entries except\nthe last."},"signatures":[{"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2082}]},"#skip":{"doc":{"synopsis":"Returns a new Iterable of the same type which excludes the first `amount`\nentries from this Iterable."},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2088}]},"#skipLast":{"doc":{"synopsis":"Returns a new Iterable of the same type which excludes the last `amount`\nentries from this Iterable."},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2094}]},"#skipWhile":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes entries starting\nfrom when `predicate` first returns false.","description":"    Seq.of('dog','frog','cat','hat','god')\n      .skipWhile(x => x.match(/g/))\n    // Seq [ 'cat', 'hat', 'god' ]\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2100}]},"#skipUntil":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes entries starting\nfrom when `predicate` first returns true.","description":"    Seq.of('dog','frog','cat','hat','god')\n      .skipUntil(x => x.match(/hat/))\n    // Seq [ 'hat', 'god' ]\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2114}]},"#take":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes the first `amount`\nentries from this Iterable."},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2128}]},"#takeLast":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes the last `amount`\nentries from this Iterable."},"signatures":[{"params":[{"name":"amount","type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2134}]},"#takeWhile":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes entries from this\nIterable as long as the `predicate` returns true.","description":"    Seq.of('dog','frog','cat','hat','god')\n      .takeWhile(x => x.match(/o/))\n    // Seq [ 'dog', 'frog' ]\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2140}]},"#takeUntil":{"doc":{"synopsis":"Returns a new Iterable of the same type which includes entries from this\nIterable as long as the `predicate` returns false.","description":"    Seq.of('dog','frog','cat','hat','god').takeUntil(x => x.match(/at/))\n    // ['dog', 'frog']\n"},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2154}]}}},{"title":"Combination","members":{"#concat":{"doc":{"synopsis":"Returns a new Iterable of the same type with other values and\niterable-like concatenated to this one.","description":"For Seqs, all entries will be present in\nthe resulting iterable, even if they have the same key."},"signatures":[{"params":[{"name":"valuesOrIterables","varArgs":true,"type":{"k":5,"type":{"k":0}}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2167}]},"#flatten":{"doc":{"synopsis":"Flattens nested Iterables.","description":"Will deeply flatten the Iterable by default, returning an Iterable of the\nsame type, but a `depth` can be provided in the form of a number or\nboolean (where true means to shallowly flatten one level). A depth of 0\n(or shallow: false) will deeply flatten.\n\nFlattens only others Iterable, not Arrays or Objects.\n\nNote: `flatten(true)` operates on Iterable<any, Iterable<K, V>> and\nreturns Iterable<K, V>"},"signatures":[{"params":[{"name":"depth","optional":true,"type":{"k":2}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":2179},{"params":[{"name":"shallow","optional":true,"type":{"k":1}}],"type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":0}]},"line":2194}]},"#flatMap":{"doc":{"synopsis":"Flat-maps the Iterable, returning an Iterable of the same type.","description":"Similar to `iter.map(...).flatten(true)`."},"signatures":[{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":2195},{"typeParams":["MK","MV"],"params":[{"name":"mapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":0}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"MK"},{"k":7,"param":"MV"}]},"line":2205}]}}},{"title":"Reducing a value","members":{"#reduce":{"doc":{"synopsis":"Reduces the Iterable to a value by calling the `reducer` for every entry\nin the Iterable and passing along the reduced value.","notes":[{"name":"see","body":"`Array#reduce`."}],"description":"If `initialReduction` is not provided, or is null, the first item in the\nIterable will be used.\n"},"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":2209}]},"#reduceRight":{"doc":{"synopsis":"Reduces the Iterable in reverse (from the right side).","description":"Note: Similar to this.reverse().reduce(), and provided for parity\nwith `Array#reduceRight`."},"signatures":[{"typeParams":["R"],"params":[{"name":"reducer","type":{"k":6,"params":[{"name":"reduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"R"}}},{"name":"initialReduction","optional":true,"type":{"k":7,"param":"R"}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"R"},"line":2227}]},"#every":{"doc":{"synopsis":"True if `predicate` returns true for all entries in the Iterable."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":2239}]},"#some":{"doc":{"synopsis":"True if `predicate` returns true for any entry in the Iterable."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":1},"line":2247}]},"#join":{"doc":{"synopsis":"Joins values together as a string, inserting a separator between each.\nThe default separator is `\",\"`."},"signatures":[{"params":[{"name":"separator","optional":true,"type":{"k":3}}],"type":{"k":3},"line":2255}]},"#isEmpty":{"doc":{"synopsis":"Returns true if this Iterable includes no values.","description":"For some lazy `Seq`, `isEmpty` might need to iterate to determine\nemptiness. At most one iteration will occur."},"signatures":[{"type":{"k":1},"line":2261}]},"#count":{"doc":{"synopsis":"Returns the size of this Iterable.","description":"Regardless of if this Iterable can describe its size lazily (some Seqs\ncannot), this method will always return the correct size. E.g. it\nevaluates a lazy `Seq` if necessary.\n\nIf `predicate` is provided, then this returns the count of entries in the\nIterable for which the `predicate` returns true."},"signatures":[{"type":{"k":2},"line":2269},{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":2},"line":2281}]},"#countBy":{"doc":{"synopsis":"Returns a `Seq.Keyed` of counts, grouped by the return value of\nthe `grouper` function.","description":"Note: This is not a lazy operation."},"signatures":[{"typeParams":["G"],"params":[{"name":"grouper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"G"}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":8,"name":"Map","args":[{"k":7,"param":"G"},{"k":2}]},"line":2285}]}}},{"title":"Search for value","members":{"#find":{"doc":{"synopsis":"Returns the first value for which the `predicate` returns true."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":2296}]},"#findLast":{"doc":{"synopsis":"Returns the last value for which the `predicate` returns true.","description":"Note: `predicate` will be called for each entry in reverse."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"V"},"line":2308}]},"#findEntry":{"doc":{"synopsis":"Returns the first [key, value] entry for which the `predicate` returns true."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Array","args":[{"k":0}]},"line":2319}]},"#findLastEntry":{"doc":{"synopsis":"Returns the last [key, value] entry for which the `predicate`\nreturns true.","description":"Note: `predicate` will be called for each entry in reverse."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}},{"name":"notSetValue","optional":true,"type":{"k":7,"param":"V"}}],"type":{"k":8,"name":"Array","args":[{"k":0}]},"line":2328}]},"#findKey":{"doc":{"synopsis":"Returns the key for which the `predicate` returns true."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":2340}]},"#findLastKey":{"doc":{"synopsis":"Returns the last key for which the `predicate` returns true.","description":"Note: `predicate` will be called for each entry in reverse."},"signatures":[{"params":[{"name":"predicate","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":1}}},{"name":"context","optional":true,"type":{"k":0}}],"type":{"k":7,"param":"K"},"line":2348}]},"#keyOf":{"doc":{"synopsis":"Returns the key associated with the search value, or undefined."},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":2358}]},"#lastKeyOf":{"doc":{"synopsis":"Returns the last key associated with the search value, or undefined."},"signatures":[{"params":[{"name":"searchValue","type":{"k":7,"param":"V"}}],"type":{"k":7,"param":"K"},"line":2363}]},"#max":{"doc":{"synopsis":"Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.","description":"The `comparator` is used in the same way as `Iterable#sort`. If it is not\nprovided, the default comparator is `>`.\n\nWhen two values are considered equivalent, the first encountered will be\nreturned. Otherwise, `max` will operate independent of the order of input\nas long as the comparator is commutative. The default comparator `>` is\ncommutative *only* when types do not differ.\n\nIf `comparator` returns 0 and either value is NaN, undefined, or null,\nthat value will be returned."},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":2368}]},"#maxBy":{"doc":{"synopsis":"Like `max`, but also accepts a `comparatorValueMapper` which allows for\ncomparing by more sophisticated means:","description":"    hitters.maxBy(hitter => hitter.avgHits);\n"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":2385}]},"#min":{"doc":{"synopsis":"Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.","description":"The `comparator` is used in the same way as `Iterable#sort`. If it is not\nprovided, the default comparator is `<`.\n\nWhen two values are considered equivalent, the first encountered will be\nreturned. Otherwise, `min` will operate independent of the order of input\nas long as the comparator is commutative. The default comparator `<` is\ncommutative *only* when types do not differ.\n\nIf `comparator` returns 0 and either value is NaN, undefined, or null,\nthat value will be returned."},"signatures":[{"params":[{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"V"}},{"name":"valueB","type":{"k":7,"param":"V"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":2397}]},"#minBy":{"doc":{"synopsis":"Like `min`, but also accepts a `comparatorValueMapper` which allows for\ncomparing by more sophisticated means:","description":"    hitters.minBy(hitter => hitter.avgHits);\n"},"signatures":[{"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":6,"params":[{"name":"value","optional":true,"type":{"k":7,"param":"V"}},{"name":"key","optional":true,"type":{"k":7,"param":"K"}},{"name":"iter","optional":true,"type":{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}}],"type":{"k":7,"param":"C"}}},{"name":"comparator","optional":true,"type":{"k":6,"params":[{"name":"valueA","type":{"k":7,"param":"C"}},{"name":"valueB","type":{"k":7,"param":"C"}}],"type":{"k":2}}}],"type":{"k":7,"param":"V"},"line":2414}]}}},{"title":"Comparison","members":{"#isSubset":{"doc":{"synopsis":"True if `iter` includes every value in this Iterable."},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":2426},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":2434}]},"#isSuperset":{"doc":{"synopsis":"True if this Iterable includes every value in `iter`."},"signatures":[{"params":[{"name":"iter","type":{"k":8,"name":"Iterable","args":[{"k":0},{"k":7,"param":"V"}]}}],"type":{"k":1},"line":2435},{"params":[{"name":"iter","type":{"k":8,"name":"Array","args":[{"k":7,"param":"V"}]}}],"type":{"k":1},"line":2440}]}}}]}},"Collection":{"doc":{"synopsis":"Collection is the abstract base class for concrete data structures. It\ncannot be constructed directly.","description":"Implementations should extend one of the subclasses, `Collection.Keyed`,\n`Collection.Indexed`, or `Collection.Set`."},"module":{"Keyed":{"doc":{"synopsis":"`Collection` which represents key-value pairs."},"module":{},"interface":{"line":2469,"typeParams":["K","V"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},{"k":8,"name":"Iterable.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Keyed."},"signatures":[{"type":{"k":8,"name":"Seq.Keyed","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]},"line":2471}]}}}]}},"Indexed":{"doc":{"synopsis":"`Collection` which represents ordered indexed values."},"module":{},"interface":{"line":2484,"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":2},{"k":7,"param":"T"}]},{"k":8,"name":"Iterable.Indexed","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Indexed."},"signatures":[{"type":{"k":8,"name":"Seq.Indexed","args":[{"k":7,"param":"T"}]},"line":2486}]}}}]}},"Set":{"doc":{"synopsis":"`Collection` which represents values, unassociated with keys or indices.","description":"`Collection.Set` implementations should guarantee value uniqueness."},"module":{},"interface":{"line":2501,"typeParams":["T"],"extends":[{"k":8,"name":"Collection","args":[{"k":7,"param":"T"},{"k":7,"param":"T"}]},{"k":8,"name":"Iterable.Set","args":[{"k":7,"param":"T"}]}],"groups":[{"members":{"#toSeq":{"doc":{"synopsis":"Returns Seq.Set."},"signatures":[{"type":{"k":8,"name":"Seq.Set","args":[{"k":7,"param":"T"}]},"line":2503}]}}}]}}},"interface":{"line":2512,"typeParams":["K","V"],"extends":[{"k":8,"name":"Iterable","args":[{"k":7,"param":"K"},{"k":7,"param":"V"}]}],"groups":[{"members":{"#size":{"line":2514,"type":{"k":2}}}}]}}}},"\"immutable\"":{"module":{}}}